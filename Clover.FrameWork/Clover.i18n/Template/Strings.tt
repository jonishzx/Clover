<#@ template language="C#v3.5" hostspecific="True" #>






























using System;
using System.Collections.Generic;
using System.Text;
using System.Globalization;
using System.Threading;
using System.Configuration;
using System.Diagnostics;
using System.IO;
using System.Reflection;

namespace <#= this.NamespaceName #>
{
    public class <#= this.ClassName #>
    {
		private static Object resourceManLock = new Object();
        private static System.Resources.ResourceManager resourceMan;
        private static System.Globalization.CultureInfo resourceCulture;

        public const string ResourceName = "<#= this.ResourceName #>";

<# if (!UseDatabase) { #>
        private static string resourcesDir = GetSetting("ResourcesDir", "<#= this.DefaultResourceDir #>");
        private static string fileFormat = GetSetting("ResourcesFileFormat", "<#= this.DefaultFileFormat #>");
<# } #>
        
        private static string GetSetting(string setting, string defaultValue)
        {
			var section = (System.Collections.Specialized.NameValueCollection)System.Configuration.ConfigurationManager.GetSection("<#= this.ConfigurationSection #>");
			if (section == null) return defaultValue;
			else return section[setting] ?? defaultValue;
        }

<# if (!UseDatabase) { #>        
        
        
        
        public static string ResourcesDirectory
        {
            get { return resourcesDir; }
            set { resourcesDir = value; }
        }

        
        
        
        public static string FileFormat
        {
            get { return fileFormat; }
            set { fileFormat = value; }
        }
<# } #>

<# if (ResourceManagerExpires) { #>
		private static DateTime resourceManagerLoadedAt = DateTime.Now;
<# } #>

        
        
        
        public static System.Resources.ResourceManager ResourceManager
        {
            get
            {
<# if (ResourceManagerExpires) { #>
				if (resourceMan != null && DateTime.Now.Subtract(resourceManagerLoadedAt).TotalMinutes >= <#= ResourceManagerTTL #>)
				{
					lock (resourceManLock) 
					{
						if (resourceMan != null && DateTime.Now.Subtract(resourceManagerLoadedAt).TotalMinutes >= <#= ResourceManagerTTL #>)
						{
							resourceMan.ReleaseAllResources();
							resourceMan = null;
						}
					}
				}
<# } #>
            
                if (object.ReferenceEquals(resourceMan, null))
                {
					lock (resourceManLock) 
					{
					    if (object.ReferenceEquals(resourceMan, null))
		                {
<# if (UseDatabase) { #>
							var mgr = new global::Clover.I18n.DatabaseResourceManager("<#= this.StoredProcedureName #>");
<# } else { #>
							var directory = resourcesDir;
	<# if (ServerMapPath) { #>
							if (System.Web.HttpContext.Current != null)
								directory = System.Web.HttpContext.Current.Server.MapPath(directory);
	<# } #>
							var mgr = <#= String.Format(this.ResourceManagerCtor, this.ResourceManagerType) #>;
	<# if (ResourceManagerExpires) { #>
		                    resourceManagerLoadedAt = DateTime.Now;
	<# } #>
<# } #>
							resourceMan = mgr;
						}
					}
                }
                
                return resourceMan;
            }
        }

        
        
        
        
        public static System.Globalization.CultureInfo Culture
        {
            get { return resourceCulture; }
            set { resourceCulture = value; }
        }

        
        
        
        public static string T(string t)
        {
            return T(null, t);
        }

		<# if (!UseDatabase) { #>

		
        
        
        public static string TP(CultureInfo info, string t, long n)
        {
            if (String.IsNullOrEmpty(t)) return t;
            var mgr = ResourceManager as Clover.I18n.FileBasedResourceManager;
            var translated = mgr.GetPluralString(t, null, n, info ?? resourceCulture);
            return String.IsNullOrEmpty(translated) ? t : translated;
        }   
        
          
        
        
        public static string TP(CultureInfo info, string t, long n, params object[] parameters)
        {
            if (String.IsNullOrEmpty(t)) return t;
            return String.Format(TP(info, t, n), parameters);
        }     	
        <# }#>
        
        
        
        
        public static string T(CultureInfo info, string t)
        {
            if (String.IsNullOrEmpty(t)) return t;
            var translated = ResourceManager.GetString(t, info ?? resourceCulture);
            return String.IsNullOrEmpty(translated) ? t : translated;
        }

        
        
        
        public static string T(string t, params object[] parameters)
        {
            return T(null, t, parameters);
        }

        
        
        
        public static string T(CultureInfo info, string t, params object[] parameters)
        {
            if (String.IsNullOrEmpty(t)) return t;
            return String.Format(T(info, t), parameters);
        }

        
        
        
        public static string M(string t)
        {
            return t;
        }
        
        
        
        
        public static System.Resources.ResourceSet GetResourceSet(CultureInfo culture)
        {
            return ResourceManager.GetResourceSet(culture, true, true);
        }
    }
}
 
<#+  
    
    
    string ClassName = "Strings";
    string ResourceName = "Strings";
    string NamespaceName = "Clover.I18n";
    
    string ResourceManagerType = "global::Clover.I18n.GettextResourceManager";
    string ResourceManagerCtor = "new {0}(ResourceName, directory, fileFormat)";
    string DefaultResourceDir = "Po";
    string DefaultFileFormat = "{{culture}}/{{resource}}.po";
    
    string ConfigurationSection = "appSettings";
    bool ServerMapPath = false;
    
    bool ResourceManagerExpires = false;
    int ResourceManagerTTL = 0;
    
    bool UseDatabase = false;
    string StoredProcedureName = "GettextGetResourceSet";
#>
